////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ClockMM_SS_drc.vf
// /___/   /\     Timestamp : 11/19/2021 16:24:14
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: C:\Xilinx\14.7\ISE_DS\ISE\bin\nt64\unwrapped\sch2hdl.exe -intstyle ise -family spartan6 -verilog ClockMM_SS_drc.vf -w C:/Users/Parker/Documents/1-2564/Digi/Labs/7/Lab7stopwatch/ClockMM_SS.sch
//Design Name: ClockMM_SS
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_ClockMM_SS(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Counter0_9_MUSER_ClockMM_SS(CLK, 
                                   Reset, 
                                   Count, 
                                   TC);

    input CLK;
    input Reset;
   output [3:0] Count;
   output TC;
   
   wire XLXN_8;
   
   (* HU_SET = "XLXI_1_0" *) 
   CD4CE_HXILINX_ClockMM_SS  XLXI_1 (.C(CLK), 
                                    .CE(XLXN_8), 
                                    .CLR(Reset), 
                                    .CEO(), 
                                    .Q0(Count[0]), 
                                    .Q1(Count[1]), 
                                    .Q2(Count[2]), 
                                    .Q3(Count[3]), 
                                    .TC(TC));
   VCC  XLXI_2 (.P(XLXN_8));
endmodule
`timescale 1ns / 1ps

module Counter0_5_MUSER_ClockMM_SS(CLK, 
                                   Reset, 
                                   Count, 
                                   TC);

    input CLK;
    input Reset;
   output [3:0] Count;
   output TC;
   
   wire XLXN_1;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_15;
   wire [3:0] Count_DUMMY;
   wire TC_DUMMY;
   
   assign Count[3:0] = Count_DUMMY[3:0];
   assign TC = TC_DUMMY;
   (* HU_SET = "XLXI_1_1" *) 
   CD4CE_HXILINX_ClockMM_SS  XLXI_1 (.C(CLK), 
                                    .CE(XLXN_15), 
                                    .CLR(XLXN_1), 
                                    .CEO(), 
                                    .Q0(Count_DUMMY[0]), 
                                    .Q1(Count_DUMMY[1]), 
                                    .Q2(Count_DUMMY[2]), 
                                    .Q3(Count_DUMMY[3]), 
                                    .TC());
   OR2  XLXI_2 (.I0(TC_DUMMY), 
               .I1(Reset), 
               .O(XLXN_1));
   INV  XLXI_3 (.I(Count_DUMMY[0]), 
               .O(XLXN_8));
   INV  XLXI_4 (.I(Count_DUMMY[3]), 
               .O(XLXN_7));
   AND4  XLXI_5 (.I0(XLXN_7), 
                .I1(Count_DUMMY[2]), 
                .I2(Count_DUMMY[1]), 
                .I3(XLXN_8), 
                .O(TC_DUMMY));
   VCC  XLXI_6 (.P(XLXN_15));
endmodule
`timescale 1ns / 1ps

module ClockMM_SS(CLK, 
                  Reset, 
                  BCD);

    input CLK;
    input Reset;
   output [15:0] BCD;
   
   wire XLXN_1;
   wire XLXN_5;
   wire XLXN_6;
   
   Counter0_5_MUSER_ClockMM_SS  XLXI_1 (.CLK(XLXN_1), 
                                       .Reset(Reset), 
                                       .Count(BCD[7:4]), 
                                       .TC(XLXN_5));
   Counter0_9_MUSER_ClockMM_SS  XLXI_3 (.CLK(CLK), 
                                       .Reset(Reset), 
                                       .Count(BCD[3:0]), 
                                       .TC(XLXN_1));
   Counter0_9_MUSER_ClockMM_SS  XLXI_4 (.CLK(XLXN_5), 
                                       .Reset(Reset), 
                                       .Count(BCD[11:8]), 
                                       .TC(XLXN_6));
   Counter0_9_MUSER_ClockMM_SS  XLXI_5 (.CLK(XLXN_6), 
                                       .Reset(Reset), 
                                       .Count(BCD[15:12]), 
                                       .TC());
endmodule
