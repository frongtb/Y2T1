////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Counter0_5_drc.vf
// /___/   /\     Timestamp : 11/19/2021 18:26:41
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: C:\Xilinx\14.7\ISE_DS\ISE\bin\nt64\unwrapped\sch2hdl.exe -intstyle ise -family spartan6 -verilog Counter0_5_drc.vf -w C:/Users/Parker/Documents/1-2564/Digi/Labs/7/Lab7stopwatch/Counter0_5.sch
//Design Name: Counter0_5
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_Counter0_5(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Counter0_5(CE, 
                  CLK, 
                  Reset, 
                  CEO, 
                  Count);

    input CE;
    input CLK;
    input Reset;
   output CEO;
   output [3:0] Count;
   
   wire XLXN_1;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_17;
   wire XLXN_19;
   wire XLXN_28;
   wire XLXN_29;
   wire [3:0] Count_DUMMY;
   
   assign Count[3:0] = Count_DUMMY[3:0];
   (* HU_SET = "XLXI_1_0" *) 
   CD4CE_HXILINX_Counter0_5  XLXI_1 (.C(CLK), 
                                    .CE(CE), 
                                    .CLR(XLXN_1), 
                                    .CEO(), 
                                    .Q0(Count_DUMMY[0]), 
                                    .Q1(Count_DUMMY[1]), 
                                    .Q2(Count_DUMMY[2]), 
                                    .Q3(Count_DUMMY[3]), 
                                    .TC());
   OR2  XLXI_2 (.I0(XLXN_28), 
               .I1(Reset), 
               .O(XLXN_1));
   INV  XLXI_3 (.I(Count_DUMMY[0]), 
               .O(XLXN_8));
   INV  XLXI_4 (.I(Count_DUMMY[3]), 
               .O(XLXN_7));
   AND4  XLXI_5 (.I0(XLXN_7), 
                .I1(Count_DUMMY[2]), 
                .I2(Count_DUMMY[1]), 
                .I3(XLXN_8), 
                .O(XLXN_28));
   INV  XLXI_7 (.I(Count_DUMMY[1]), 
               .O(XLXN_17));
   INV  XLXI_8 (.I(Count_DUMMY[3]), 
               .O(XLXN_19));
   AND4  XLXI_9 (.I0(XLXN_19), 
                .I1(Count_DUMMY[2]), 
                .I2(XLXN_17), 
                .I3(Count_DUMMY[0]), 
                .O(XLXN_29));
   AND2  XLXI_10 (.I0(CE), 
                 .I1(XLXN_29), 
                 .O(CEO));
endmodule
