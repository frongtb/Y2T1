////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main_drc.vf
// /___/   /\     Timestamp : 11/19/2021 16:48:33
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: C:\Xilinx\14.7\ISE_DS\ISE\bin\nt64\unwrapped\sch2hdl.exe -intstyle ise -family spartan6 -verilog main_drc.vf -w C:/Users/Parker/Documents/1-2564/Digi/Labs/7/Lab7stopwatch/main.sch
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module FTC_HXILINX_main(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale  100 ps / 10 ps

module INV4_HXILINX_main (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_main (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module FTCE_HXILINX_main(Q, C, CE, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;

   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(CE) 
          if(T)
            Q <= !Q;
     end
   
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_main (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_main(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module BCDto7Seg_MUSER_main(BCD, 
                            Seg);

    input [3:0] BCD;
   output [6:0] Seg;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_53;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_65;
   wire XLXN_66;
   wire XLXN_67;
   wire XLXN_68;
   wire XLXN_69;
   wire XLXN_70;
   wire XLXN_71;
   wire XLXN_72;
   wire XLXN_76;
   wire XLXN_77;
   wire XLXN_78;
   wire XLXN_79;
   wire XLXN_80;
   wire XLXN_81;
   wire XLXN_82;
   wire XLXN_83;
   wire XLXN_84;
   wire XLXN_86;
   wire XLXN_87;
   wire XLXN_88;
   wire XLXN_89;
   wire XLXN_90;
   wire XLXN_92;
   wire XLXN_93;
   wire XLXN_95;
   wire XLXN_96;
   wire XLXN_97;
   wire XLXN_98;
   wire XLXN_99;
   wire XLXN_100;
   wire XLXN_101;
   wire XLXN_102;
   wire XLXN_103;
   wire XLXN_104;
   wire XLXN_106;
   wire XLXN_107;
   wire XLXN_110;
   wire XLXN_111;
   wire XLXN_113;
   wire XLXN_114;
   wire XLXN_115;
   wire XLXN_116;
   wire XLXN_117;
   wire XLXN_120;
   wire XLXN_407;
   wire XLXN_427;
   wire XLXN_1225;
   wire XLXN_1228;
   wire XLXN_1231;
   wire XLXN_1233;
   wire XLXN_1234;
   wire XLXN_1235;
   wire XLXN_1240;
   wire XLXN_1241;
   wire XLXN_1242;
   wire XLXN_1519;
   wire XLXN_1520;
   wire XLXN_1537;
   
   AND2  XLXI_1 (.I0(XLXN_5), 
                .I1(XLXN_120), 
                .O(XLXN_3));
   INV  XLXI_2 (.I(BCD[2]), 
               .O(XLXN_120));
   INV  XLXI_3 (.I(BCD[0]), 
               .O(XLXN_5));
   OR2  XLXI_4 (.I0(XLXN_2), 
               .I1(XLXN_3), 
               .O(XLXN_115));
   AND2  XLXI_5 (.I0(BCD[1]), 
                .I1(XLXN_1225), 
                .O(XLXN_2));
   AND2  XLXI_6 (.I0(BCD[2]), 
                .I1(XLXN_407), 
                .O(XLXN_117));
   AND2  XLXI_7 (.I0(BCD[0]), 
                .I1(XLXN_117), 
                .O(XLXN_116));
   OR2  XLXI_8 (.I0(XLXN_116), 
               .I1(XLXN_115), 
               .O(XLXN_114));
   OR2  XLXI_9 (.I0(XLXN_113), 
               .I1(XLXN_114), 
               .O(Seg[0]));
   INV  XLXI_10 (.I(BCD[3]), 
                .O(XLXN_407));
   OR2  XLXI_11 (.I0(XLXN_95), 
                .I1(XLXN_102), 
                .O(Seg[1]));
   OR2  XLXI_12 (.I0(XLXN_1231), 
                .I1(XLXN_1228), 
                .O(XLXN_113));
   OR2  XLXI_13 (.I0(XLXN_30), 
                .I1(XLXN_103), 
                .O(XLXN_102));
   OR2  XLXI_14 (.I0(XLXN_427), 
                .I1(XLXN_104), 
                .O(XLXN_103));
   AND2  XLXI_15 (.I0(XLXN_110), 
                 .I1(XLXN_111), 
                 .O(XLXN_104));
   AND2  XLXI_16 (.I0(XLXN_106), 
                 .I1(XLXN_107), 
                 .O(XLXN_427));
   INV  XLXI_17 (.I(BCD[3]), 
                .O(XLXN_111));
   AND2  XLXI_18 (.I0(XLXN_16), 
                 .I1(XLXN_15), 
                 .O(XLXN_107));
   INV  XLXI_19 (.I(BCD[2]), 
                .O(XLXN_110));
   INV  XLXI_20 (.I(BCD[3]), 
                .O(XLXN_15));
   INV  XLXI_21 (.I(BCD[1]), 
                .O(XLXN_16));
   INV  XLXI_22 (.I(BCD[0]), 
                .O(XLXN_106));
   AND2  XLXI_23 (.I0(XLXN_92), 
                 .I1(XLXN_93), 
                 .O(XLXN_30));
   AND2  XLXI_24 (.I0(BCD[1]), 
                 .I1(XLXN_101), 
                 .O(XLXN_99));
   AND2  XLXI_25 (.I0(BCD[0]), 
                 .I1(XLXN_99), 
                 .O(XLXN_97));
   AND2  XLXI_26 (.I0(BCD[0]), 
                 .I1(XLXN_98), 
                 .O(XLXN_96));
   AND2  XLXI_27 (.I0(XLXN_100), 
                 .I1(BCD[3]), 
                 .O(XLXN_98));
   INV  XLXI_28 (.I(BCD[3]), 
                .O(XLXN_101));
   INV  XLXI_29 (.I(BCD[1]), 
                .O(XLXN_100));
   OR2  XLXI_30 (.I0(XLXN_96), 
                .I1(XLXN_97), 
                .O(XLXN_95));
   INV  XLXI_31 (.I(BCD[2]), 
                .O(XLXN_93));
   INV  XLXI_32 (.I(BCD[0]), 
                .O(XLXN_92));
   AND2  XLXI_43 (.I0(BCD[1]), 
                 .I1(XLXN_1537), 
                 .O(XLXN_25));
   AND2  XLXI_59 (.I0(XLXN_1), 
                 .I1(BCD[1]), 
                 .O(XLXN_26));
   OR2  XLXI_60 (.I0(XLXN_26), 
                .I1(XLXN_25), 
                .O(XLXN_24));
   AND2  XLXI_61 (.I0(BCD[0]), 
                 .I1(BCD[3]), 
                 .O(XLXN_19));
   AND2  XLXI_62 (.I0(XLXN_17), 
                 .I1(BCD[3]), 
                 .O(XLXN_20));
   OR2  XLXI_63 (.I0(XLXN_19), 
                .I1(XLXN_20), 
                .O(XLXN_18));
   OR2  XLXI_64 (.I0(XLXN_18), 
                .I1(XLXN_21), 
                .O(Seg[6]));
   OR2  XLXI_65 (.I0(XLXN_23), 
                .I1(XLXN_24), 
                .O(XLXN_21));
   AND2  XLXI_66 (.I0(XLXN_28), 
                 .I1(XLXN_27), 
                 .O(XLXN_23));
   OR2  XLXI_67 (.I0(XLXN_33), 
                .I1(XLXN_34), 
                .O(Seg[4]));
   OR2  XLXI_68 (.I0(XLXN_35), 
                .I1(XLXN_36), 
                .O(XLXN_33));
   OR2  XLXI_69 (.I0(XLXN_38), 
                .I1(XLXN_39), 
                .O(XLXN_34));
   INV  XLXI_70 (.I(BCD[0]), 
                .O(XLXN_40));
   INV  XLXI_71 (.I(BCD[0]), 
                .O(XLXN_41));
   INV  XLXI_72 (.I(BCD[2]), 
                .O(XLXN_31));
   AND2  XLXI_73 (.I0(BCD[2]), 
                 .I1(BCD[3]), 
                 .O(XLXN_35));
   AND2  XLXI_74 (.I0(BCD[1]), 
                 .I1(BCD[3]), 
                 .O(XLXN_36));
   AND2  XLXI_75 (.I0(XLXN_40), 
                 .I1(BCD[1]), 
                 .O(XLXN_38));
   AND2  XLXI_76 (.I0(XLXN_41), 
                 .I1(XLXN_31), 
                 .O(XLXN_39));
   INV  XLXI_85 (.I(BCD[3]), 
                .O(XLXN_1225));
   INV  XLXI_86 (.I(BCD[3]), 
                .O(XLXN_53));
   INV  XLXI_87 (.I(BCD[2]), 
                .O(XLXN_54));
   AND2  XLXI_88 (.I0(XLXN_54), 
                 .I1(XLXN_53), 
                 .O(XLXN_55));
   AND2  XLXI_89 (.I0(XLXN_56), 
                 .I1(XLXN_55), 
                 .O(XLXN_60));
   INV  XLXI_90 (.I(BCD[0]), 
                .O(XLXN_56));
   OR2  XLXI_91 (.I0(XLXN_59), 
                .I1(XLXN_60), 
                .O(XLXN_63));
   AND2  XLXI_92 (.I0(BCD[0]), 
                 .I1(XLXN_58), 
                 .O(XLXN_59));
   AND2  XLXI_93 (.I0(BCD[1]), 
                 .I1(XLXN_57), 
                 .O(XLXN_58));
   INV  XLXI_94 (.I(BCD[2]), 
                .O(XLXN_57));
   AND2  XLXI_95 (.I0(BCD[0]), 
                 .I1(XLXN_62), 
                 .O(XLXN_65));
   AND2  XLXI_96 (.I0(XLXN_61), 
                 .I1(BCD[2]), 
                 .O(XLXN_62));
   INV  XLXI_97 (.I(BCD[1]), 
                .O(XLXN_61));
   OR2  XLXI_98 (.I0(XLXN_65), 
                .I1(XLXN_63), 
                .O(XLXN_66));
   OR2  XLXI_99 (.I0(XLXN_72), 
                .I1(XLXN_66), 
                .O(Seg[3]));
   OR2  XLXI_100 (.I0(XLXN_70), 
                 .I1(XLXN_69), 
                 .O(XLXN_72));
   AND2  XLXI_101 (.I0(XLXN_68), 
                  .I1(XLXN_67), 
                  .O(XLXN_69));
   AND2  XLXI_102 (.I0(XLXN_71), 
                  .I1(BCD[3]), 
                  .O(XLXN_70));
   AND2  XLXI_103 (.I0(BCD[1]), 
                  .I1(BCD[2]), 
                  .O(XLXN_67));
   INV  XLXI_104 (.I(BCD[0]), 
                 .O(XLXN_68));
   INV  XLXI_105 (.I(BCD[1]), 
                 .O(XLXN_71));
   OR2  XLXI_106 (.I0(XLXN_76), 
                 .I1(XLXN_77), 
                 .O(Seg[2]));
   OR2  XLXI_107 (.I0(XLXN_78), 
                 .I1(XLXN_79), 
                 .O(XLXN_76));
   INV  XLXI_108 (.I(BCD[2]), 
                 .O(XLXN_80));
   INV  XLXI_109 (.I(BCD[3]), 
                 .O(XLXN_81));
   AND2  XLXI_110 (.I0(XLXN_80), 
                  .I1(BCD[3]), 
                  .O(XLXN_78));
   AND2  XLXI_111 (.I0(BCD[2]), 
                  .I1(XLXN_81), 
                  .O(XLXN_79));
   INV  XLXI_112 (.I(BCD[1]), 
                 .O(XLXN_82));
   AND2  XLXI_113 (.I0(BCD[0]), 
                  .I1(XLXN_82), 
                  .O(XLXN_83));
   OR2  XLXI_114 (.I0(XLXN_86), 
                 .I1(XLXN_87), 
                 .O(XLXN_84));
   INV  XLXI_115 (.I(BCD[3]), 
                 .O(XLXN_88));
   AND2  XLXI_116 (.I0(BCD[0]), 
                  .I1(XLXN_88), 
                  .O(XLXN_86));
   OR2  XLXI_117 (.I0(XLXN_83), 
                 .I1(XLXN_84), 
                 .O(XLXN_77));
   INV  XLXI_118 (.I(BCD[1]), 
                 .O(XLXN_89));
   INV  XLXI_119 (.I(BCD[3]), 
                 .O(XLXN_90));
   AND2  XLXI_120 (.I0(XLXN_89), 
                  .I1(XLXN_90), 
                  .O(XLXN_87));
   INV  XLXI_299 (.I(BCD[2]), 
                 .O(XLXN_1537));
   AND2  XLXI_301 (.I0(BCD[2]), 
                  .I1(XLXN_29), 
                  .O(XLXN_27));
   INV  XLXI_303 (.I(BCD[0]), 
                 .O(XLXN_1));
   INV  XLXI_304 (.I(BCD[3]), 
                 .O(XLXN_29));
   INV  XLXI_305 (.I(BCD[1]), 
                 .O(XLXN_28));
   INV  XLXI_306 (.I(BCD[2]), 
                 .O(XLXN_17));
   OR2  XLXI_307 (.I0(XLXN_14), 
                 .I1(XLXN_13), 
                 .O(Seg[5]));
   OR2  XLXI_308 (.I0(XLXN_12), 
                 .I1(XLXN_10), 
                 .O(XLXN_13));
   OR2  XLXI_309 (.I0(XLXN_1519), 
                 .I1(XLXN_6), 
                 .O(XLXN_14));
   AND2  XLXI_310 (.I0(XLXN_1520), 
                  .I1(XLXN_8), 
                  .O(XLXN_10));
   AND2  XLXI_311 (.I0(XLXN_7), 
                  .I1(BCD[2]), 
                  .O(XLXN_12));
   AND2  XLXI_312 (.I0(XLXN_9), 
                  .I1(BCD[3]), 
                  .O(XLXN_6));
   INV  XLXI_313 (.I(BCD[1]), 
                 .O(XLXN_8));
   INV  XLXI_316 (.I(BCD[2]), 
                 .O(XLXN_9));
   INV  XLXI_344 (.I(BCD[3]), 
                 .O(XLXN_7));
   OR2  XLXI_1163 (.I0(XLXN_1234), 
                  .I1(XLXN_1233), 
                  .O(XLXN_1228));
   AND2  XLXI_1164 (.I0(XLXN_1235), 
                   .I1(BCD[3]), 
                   .O(XLXN_1231));
   AND2  XLXI_1165 (.I0(XLXN_1241), 
                   .I1(XLXN_1240), 
                   .O(XLXN_1234));
   AND2  XLXI_1166 (.I0(BCD[1]), 
                   .I1(BCD[2]), 
                   .O(XLXN_1233));
   AND2  XLXI_1167 (.I0(XLXN_1242), 
                   .I1(BCD[3]), 
                   .O(XLXN_1240));
   INV  XLXI_1168 (.I(BCD[0]), 
                  .O(XLXN_1235));
   INV  XLXI_1169 (.I(BCD[2]), 
                  .O(XLXN_1242));
   INV  XLXI_1170 (.I(BCD[1]), 
                  .O(XLXN_1241));
   AND2  XLXI_1333 (.I0(BCD[1]), 
                   .I1(BCD[3]), 
                   .O(XLXN_1519));
   INV  XLXI_1334 (.I(BCD[0]), 
                  .O(XLXN_1520));
endmodule
`timescale 1ns / 1ps

module Display_MUSER_main(BCD, 
                          Dot, 
                          ScanCLK, 
                          Data, 
                          Digit);

    input [15:0] BCD;
    input Dot;
    input ScanCLK;
   output [7:0] Data;
   output [3:0] Digit;
   
   wire E;
   wire [3:0] Mux;
   wire Q0;
   wire Q1;
   wire XLXN_16;
   wire XLXN_18;
   wire XLXN_20;
   wire XLXN_28;
   wire XLXN_34;
   wire XLXN_36;
   
   (* HU_SET = "XLXI_1_0" *) 
   D2_4E_HXILINX_main  XLXI_1 (.A0(Q0), 
                              .A1(Q1), 
                              .E(E), 
                              .D0(XLXN_16), 
                              .D1(XLXN_18), 
                              .D2(XLXN_28), 
                              .D3(XLXN_20));
   AND2  XLXI_2 (.I0(XLXN_28), 
                .I1(Dot), 
                .O(Data[7]));
   (* HU_SET = "XLXI_3_0_4" *) 
   M4_1E_HXILINX_main  XLXI_3_0 (.D0(BCD[0]), 
                                .D1(BCD[4]), 
                                .D2(BCD[8]), 
                                .D3(BCD[12]), 
                                .E(E), 
                                .S0(Q0), 
                                .S1(Q1), 
                                .O(Mux[0]));
   (* HU_SET = "XLXI_3_1_3" *) 
   M4_1E_HXILINX_main  XLXI_3_1 (.D0(BCD[1]), 
                                .D1(BCD[5]), 
                                .D2(BCD[9]), 
                                .D3(BCD[13]), 
                                .E(E), 
                                .S0(Q0), 
                                .S1(Q1), 
                                .O(Mux[1]));
   (* HU_SET = "XLXI_3_2_2" *) 
   M4_1E_HXILINX_main  XLXI_3_2 (.D0(BCD[2]), 
                                .D1(BCD[6]), 
                                .D2(BCD[10]), 
                                .D3(BCD[14]), 
                                .E(E), 
                                .S0(Q0), 
                                .S1(Q1), 
                                .O(Mux[2]));
   (* HU_SET = "XLXI_3_3_1" *) 
   M4_1E_HXILINX_main  XLXI_3_3 (.D0(BCD[3]), 
                                .D1(BCD[7]), 
                                .D2(BCD[11]), 
                                .D3(BCD[15]), 
                                .E(E), 
                                .S0(Q0), 
                                .S1(Q1), 
                                .O(Mux[3]));
   (* HU_SET = "XLXI_4_5" *) 
   CB2CE_HXILINX_main  XLXI_4 (.C(ScanCLK), 
                              .CE(XLXN_36), 
                              .CLR(XLXN_34), 
                              .CEO(), 
                              .Q0(Q0), 
                              .Q1(Q1), 
                              .TC());
   VCC  XLXI_5 (.P(E));
   (* HU_SET = "XLXI_14_6" *) 
   INV4_HXILINX_main  XLXI_14 (.I0(XLXN_20), 
                              .I1(XLXN_28), 
                              .I2(XLXN_18), 
                              .I3(XLXN_16), 
                              .O0(Digit[3]), 
                              .O1(Digit[2]), 
                              .O2(Digit[1]), 
                              .O3(Digit[0]));
   BCDto7Seg_MUSER_main  XLXI_15 (.BCD(Mux[3:0]), 
                                 .Seg(Data[6:0]));
   GND  XLXI_16 (.G(XLXN_34));
   VCC  XLXI_17 (.P(XLXN_36));
endmodule
`timescale 1ns / 1ps

module Counter0_9_MUSER_main(CLK, 
                             Reset, 
                             Count, 
                             TC);

    input CLK;
    input Reset;
   output [3:0] Count;
   output TC;
   
   wire XLXN_8;
   
   (* HU_SET = "XLXI_1_7" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK), 
                              .CE(XLXN_8), 
                              .CLR(Reset), 
                              .CEO(), 
                              .Q0(Count[0]), 
                              .Q1(Count[1]), 
                              .Q2(Count[2]), 
                              .Q3(Count[3]), 
                              .TC(TC));
   VCC  XLXI_2 (.P(XLXN_8));
endmodule
`timescale 1ns / 1ps

module Counter0_5_MUSER_main(CLK, 
                             Reset, 
                             Count, 
                             TC);

    input CLK;
    input Reset;
   output [3:0] Count;
   output TC;
   
   wire XLXN_1;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_15;
   wire [3:0] Count_DUMMY;
   wire TC_DUMMY;
   
   assign Count[3:0] = Count_DUMMY[3:0];
   assign TC = TC_DUMMY;
   (* HU_SET = "XLXI_1_8" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK), 
                              .CE(XLXN_15), 
                              .CLR(XLXN_1), 
                              .CEO(), 
                              .Q0(Count_DUMMY[0]), 
                              .Q1(Count_DUMMY[1]), 
                              .Q2(Count_DUMMY[2]), 
                              .Q3(Count_DUMMY[3]), 
                              .TC());
   OR2  XLXI_2 (.I0(TC_DUMMY), 
               .I1(Reset), 
               .O(XLXN_1));
   INV  XLXI_3 (.I(Count_DUMMY[0]), 
               .O(XLXN_8));
   INV  XLXI_4 (.I(Count_DUMMY[3]), 
               .O(XLXN_7));
   AND4  XLXI_5 (.I0(XLXN_7), 
                .I1(Count_DUMMY[2]), 
                .I2(Count_DUMMY[1]), 
                .I3(XLXN_8), 
                .O(TC_DUMMY));
   VCC  XLXI_6 (.P(XLXN_15));
endmodule
`timescale 1ns / 1ps

module ClockMM_SS_MUSER_main(CLK, 
                             Reset, 
                             BCD);

    input CLK;
    input Reset;
   output [15:0] BCD;
   
   wire XLXN_1;
   wire XLXN_5;
   wire XLXN_6;
   
   Counter0_5_MUSER_main  XLXI_1 (.CLK(XLXN_1), 
                                 .Reset(Reset), 
                                 .Count(BCD[7:4]), 
                                 .TC(XLXN_5));
   Counter0_9_MUSER_main  XLXI_3 (.CLK(CLK), 
                                 .Reset(Reset), 
                                 .Count(BCD[3:0]), 
                                 .TC(XLXN_1));
   Counter0_9_MUSER_main  XLXI_4 (.CLK(XLXN_5), 
                                 .Reset(Reset), 
                                 .Count(BCD[11:8]), 
                                 .TC(XLXN_6));
   Counter0_9_MUSER_main  XLXI_5 (.CLK(XLXN_6), 
                                 .Reset(Reset), 
                                 .Count(BCD[15:12]), 
                                 .TC());
endmodule
`timescale 1ns / 1ps

module ClockControl_MUSER_main(CLK_1s, 
                               Control, 
                               RST_in, 
                               CLK_out, 
                               RST_out);

    input CLK_1s;
    input Control;
    input RST_in;
   output CLK_out;
   output RST_out;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   
   AND2  XLXI_1 (.I0(CLK_1s), 
                .I1(XLXN_1), 
                .O(CLK_out));
   AND2  XLXI_2 (.I0(RST_in), 
                .I1(XLXN_2), 
                .O(RST_out));
   (* HU_SET = "XLXI_9_9" *) 
   FTC_HXILINX_main  XLXI_9 (.C(Control), 
                            .CLR(XLXN_4), 
                            .T(XLXN_3), 
                            .Q(XLXN_1));
   INV  XLXI_10 (.I(XLXN_1), 
                .O(XLXN_2));
   VCC  XLXI_11 (.P(XLXN_3));
   GND  XLXI_12 (.G(XLXN_4));
endmodule
`timescale 1ns / 1ps

module Div1k_MUSER_main(CLK_in, 
                        CLK_out);

    input CLK_in;
   output CLK_out;
   
   wire XLXN_1;
   wire XLXN_3;
   wire XLXN_8;
   wire XLXN_9;
   
   (* HU_SET = "XLXI_11_10" *) 
   CD4CE_HXILINX_main  XLXI_11 (.C(CLK_in), 
                               .CE(XLXN_1), 
                               .CLR(XLXN_3), 
                               .CEO(XLXN_9), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_12_11" *) 
   CD4CE_HXILINX_main  XLXI_12 (.C(CLK_in), 
                               .CE(XLXN_9), 
                               .CLR(XLXN_3), 
                               .CEO(XLXN_8), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   (* HU_SET = "XLXI_13_12" *) 
   CD4CE_HXILINX_main  XLXI_13 (.C(CLK_in), 
                               .CE(XLXN_8), 
                               .CLR(XLXN_3), 
                               .CEO(CLK_out), 
                               .Q0(), 
                               .Q1(), 
                               .Q2(), 
                               .Q3(), 
                               .TC());
   VCC  XLXI_14 (.P(XLXN_1));
   GND  XLXI_15 (.G(XLXN_3));
endmodule
`timescale 1ns / 1ps

module Div20k_MUSER_main(CLK_in, 
                         CLK_out);

    input CLK_in;
   output CLK_out;
   
   wire XLXN_1;
   wire XLXN_9;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   
   (* HU_SET = "XLXI_1_13" *) 
   CD4CE_HXILINX_main  XLXI_1 (.C(CLK_in), 
                              .CE(XLXN_1), 
                              .CLR(XLXN_9), 
                              .CEO(XLXN_14), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   (* HU_SET = "XLXI_2_14" *) 
   CD4CE_HXILINX_main  XLXI_2 (.C(CLK_in), 
                              .CE(XLXN_14), 
                              .CLR(XLXN_9), 
                              .CEO(XLXN_13), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   (* HU_SET = "XLXI_3_15" *) 
   CD4CE_HXILINX_main  XLXI_3 (.C(CLK_in), 
                              .CE(XLXN_13), 
                              .CLR(XLXN_9), 
                              .CEO(XLXN_12), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   (* HU_SET = "XLXI_4_16" *) 
   CD4CE_HXILINX_main  XLXI_4 (.C(CLK_in), 
                              .CE(XLXN_12), 
                              .CLR(XLXN_9), 
                              .CEO(XLXN_11), 
                              .Q0(), 
                              .Q1(), 
                              .Q2(), 
                              .Q3(), 
                              .TC());
   VCC  XLXI_6 (.P(XLXN_1));
   GND  XLXI_7 (.G(XLXN_9));
   (* HU_SET = "XLXI_8_17" *) 
   FTCE_HXILINX_main  XLXI_8 (.C(CLK_in), 
                             .CE(XLXN_11), 
                             .CLR(XLXN_9), 
                             .T(XLXN_11), 
                             .Q(CLK_out));
endmodule
`timescale 1ns / 1ps

module StopWatch_MUSER_main(CLK_20MHz, 
                            Control, 
                            Reset, 
                            Common, 
                            Segment);

    input CLK_20MHz;
    input Control;
    input Reset;
   output [3:0] Common;
   output [7:0] Segment;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire [15:0] XLXN_5;
   
   Div20k_MUSER_main  XLXI_1 (.CLK_in(CLK_20MHz), 
                             .CLK_out(XLXN_4));
   Div1k_MUSER_main  XLXI_2 (.CLK_in(XLXN_4), 
                            .CLK_out(XLXN_3));
   ClockControl_MUSER_main  XLXI_3 (.CLK_1s(XLXN_3), 
                                   .Control(Control), 
                                   .RST_in(Reset), 
                                   .CLK_out(XLXN_2), 
                                   .RST_out(XLXN_1));
   ClockMM_SS_MUSER_main  XLXI_4 (.CLK(XLXN_2), 
                                 .Reset(XLXN_1), 
                                 .BCD(XLXN_5[15:0]));
   Display_MUSER_main  XLXI_5 (.BCD(XLXN_5[15:0]), 
                              .Dot(XLXN_3), 
                              .ScanCLK(XLXN_4), 
                              .Data(Segment[7:0]), 
                              .Digit(Common[3:0]));
endmodule
`timescale 1ns / 1ps

module main(BTN_Control, 
            BTN_Reset, 
            CLK_20Mhz, 
            Common, 
            Segment);

    input BTN_Control;
    input BTN_Reset;
    input CLK_20Mhz;
   output [3:0] Common;
   output [7:0] Segment;
   
   
   StopWatch_MUSER_main  XLXI_6 (.CLK_20MHz(CLK_20Mhz), 
                                .Control(BTN_Control), 
                                .Reset(BTN_Reset), 
                                .Common(Common[3:0]), 
                                .Segment(Segment[7:0]));
endmodule
